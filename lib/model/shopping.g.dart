// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'shopping.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:ShoppingList.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// ShoppingList TABLE
class TableShoppingList extends SqfEntityTableBase {
  TableShoppingList() {
    // declare properties of EntityTable
    tableName = 'shoppingList';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('priority', DbType.integer, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableShoppingList();
  }
}

// ListItem TABLE
class TableListItem extends SqfEntityTableBase {
  TableListItem() {
    // declare properties of EntityTable
    tableName = 'listItem';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('quantity', DbType.text, isNotNull: false),
      SqfEntityFieldBase('note', DbType.text, isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableShoppingList.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'shoppingListId',
          defaultValue: 0,
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableListItem();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class ShoppingModel extends SqfEntityModelProvider {
  ShoppingModel() {
    databaseName = shoppingModel.databaseName;
    password = shoppingModel.password;
    dbVersion = shoppingModel.dbVersion;
    databaseTables = [
      TableShoppingList.getInstance,
      TableListItem.getInstance,
    ];

    bundledDatabasePath = shoppingModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region ShoppingList
class ShoppingList {
  ShoppingList({this.id, this.name, this.priority, this.isDeleted}) {
    _setDefaultValues();
  }
  ShoppingList.withFields(this.name, this.priority, this.isDeleted) {
    _setDefaultValues();
  }
  ShoppingList.withId(this.id, this.name, this.priority, this.isDeleted) {
    _setDefaultValues();
  }
  ShoppingList.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['priority'] != null) {
      priority = int.tryParse(o['priority'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (ShoppingList)
  int id;
  String name;
  int priority;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (ShoppingList)

// COLLECTIONS & VIRTUALS (ShoppingList)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plListItems', 'plField2'..]) or so on..
  List<ListItem> plListItems;

  /// get ListItem(s) filtered by id=shoppingListId
  ListItemFilterBuilder getListItems(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return ListItem()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .shoppingListId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (ShoppingList)

  static const bool _softDeleteActivated = true;
  ShoppingListManager __mnShoppingList;

  ShoppingListManager get _mnShoppingList {
    return __mnShoppingList = __mnShoppingList ?? ShoppingListManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (priority != null) {
      map['priority'] = priority;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (priority != null) {
      map['priority'] = priority;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (ShoppingList)
    if (!forQuery) {
      map['ListItems'] = await getListItems().toMapList();
    }
// END COLLECTIONS (ShoppingList)

    return map;
  }

  /// This method returns Json String [ShoppingList]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ShoppingList]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, priority, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, priority, isDeleted];
  }

  static Future<List<ShoppingList>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR ShoppingList.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<ShoppingList>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ShoppingList>[];
    try {
      objList = list
          .map((shoppinglist) =>
              ShoppingList.fromMap(shoppinglist as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR ShoppingList.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ShoppingList>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<ShoppingList> objList = <ShoppingList>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ShoppingList.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('shoppingList.plListItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plListItems'))) {
          /*_loadedFields.add('shoppingList.plListItems'); */
          obj.plListItems = obj.plListItems ??
              await obj.getListItems().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns ShoppingList by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns ShoppingList if exist, otherwise returns null
  Future<ShoppingList> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    ShoppingList obj;
    final data = await _mnShoppingList.getById([id]);
    if (data.length != 0) {
      obj = ShoppingList.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('shoppingList.plListItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plListItems'))) {
          /*_loadedFields.add('shoppingList.plListItems'); */
          obj.plListItems = obj.plListItems ??
              await obj.getListItems().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ShoppingList) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnShoppingList.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnShoppingList.update(this);
    }

    return id;
  }

  /// saveAs ShoppingList. Returns a new Primary Key value of ShoppingList

  /// <returns>Returns a new Primary Key value of ShoppingList
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<ShoppingList> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<ShoppingList> shoppinglists) async {
    // final results = _mnShoppingList.saveAll('INSERT OR REPLACE INTO shoppingList (id,name, priority,isDeleted)  VALUES (?,?,?,?)',shoppinglists);
    // return results; removed in sqfentity_gen 1.3.0+6
    await ShoppingModel().batchStart();
    for (final obj in shoppinglists) {
      await obj.save();
    }
    //    return ShoppingModel().batchCommit();
    final result = await ShoppingModel().batchCommit();
    for (int i = 0; i < shoppinglists.length; i++) {
      if (shoppinglists[i].id == null) {
        shoppinglists[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnShoppingList.rawInsert(
              'INSERT OR REPLACE INTO shoppingList (id,name, priority,isDeleted)  VALUES (?,?,?,?)',
              [id, name, priority, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'ShoppingList id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'ShoppingList id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'ShoppingList Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<ShoppingList>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<ShoppingList> shoppinglists) async {
    final results = await _mnShoppingList.rawInsertAll(
        'INSERT OR REPLACE INTO shoppingList (id,name, priority,isDeleted)  VALUES (?,?,?,?)',
        shoppinglists);
    return results;
  }

  /// Deletes ShoppingList

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete ShoppingList invoked (id=$id)');
    var result = BoolResult();
    {
      result = await ListItem()
          .select()
          .shoppingListId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnShoppingList
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnShoppingList.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover ShoppingList>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover ShoppingList invoked (id=$id)');
    {
      return _mnShoppingList.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  ShoppingListFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ShoppingListFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ShoppingListFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ShoppingListFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion shoppinglist

// region ShoppingListField
class ShoppingListField extends SearchCriteria {
  ShoppingListField(this.shoppinglistFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ShoppingListFilterBuilder shoppinglistFB;

  ShoppingListField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ShoppingListFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    shoppinglistFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.EQuals, shoppinglistFB._addedBlocks)
        : setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.NotEQuals, shoppinglistFB._addedBlocks);
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    shoppinglistFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.EQualsOrNull, shoppinglistFB._addedBlocks)
        : setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, shoppinglistFB._addedBlocks);
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder isNull() {
    shoppinglistFB._addedBlocks = setCriteria(
        0,
        shoppinglistFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        shoppinglistFB._addedBlocks);
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      shoppinglistFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          shoppinglistFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          shoppinglistFB._addedBlocks);
      _waitingNot = '';
      shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
          shoppinglistFB._addedBlocks.retVal;
    }
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      shoppinglistFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          shoppinglistFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          shoppinglistFB._addedBlocks);
      _waitingNot = '';
      shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
          shoppinglistFB._addedBlocks.retVal;
      shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
          shoppinglistFB._addedBlocks.retVal;
    }
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      shoppinglistFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          shoppinglistFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          shoppinglistFB._addedBlocks);
      _waitingNot = '';
      shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
          shoppinglistFB._addedBlocks.retVal;
    }
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      shoppinglistFB._addedBlocks = setCriteria(
          pFirst,
          shoppinglistFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          shoppinglistFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        shoppinglistFB._addedBlocks = setCriteria(
            pFirst,
            shoppinglistFB.parameters,
            param,
            SqlSyntax.LessThan,
            shoppinglistFB._addedBlocks);
      } else {
        shoppinglistFB._addedBlocks = setCriteria(
            pFirst,
            shoppinglistFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            shoppinglistFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        shoppinglistFB._addedBlocks = setCriteria(
            pLast,
            shoppinglistFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            shoppinglistFB._addedBlocks);
      } else {
        shoppinglistFB._addedBlocks = setCriteria(
            pLast,
            shoppinglistFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            shoppinglistFB._addedBlocks);
      }
    }
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    shoppinglistFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.GreaterThan, shoppinglistFB._addedBlocks)
        : setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.LessThanOrEquals, shoppinglistFB._addedBlocks);
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    shoppinglistFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.LessThan, shoppinglistFB._addedBlocks)
        : setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, shoppinglistFB._addedBlocks);
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    shoppinglistFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, shoppinglistFB._addedBlocks)
        : setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.LessThan, shoppinglistFB._addedBlocks);
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    shoppinglistFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.LessThanOrEquals, shoppinglistFB._addedBlocks)
        : setCriteria(pValue, shoppinglistFB.parameters, param,
            SqlSyntax.GreaterThan, shoppinglistFB._addedBlocks);
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }

  ShoppingListFilterBuilder inValues(dynamic pValue) {
    shoppinglistFB._addedBlocks = setCriteria(
        pValue,
        shoppinglistFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        shoppinglistFB._addedBlocks);
    _waitingNot = '';
    shoppinglistFB._addedBlocks.needEndBlock[shoppinglistFB._blockIndex] =
        shoppinglistFB._addedBlocks.retVal;
    return shoppinglistFB;
  }
}
// endregion ShoppingListField

// region ShoppingListFilterBuilder
class ShoppingListFilterBuilder extends SearchCriteria {
  ShoppingListFilterBuilder(ShoppingList obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  ShoppingList _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ShoppingListFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ShoppingListFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ShoppingListFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ShoppingListFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ShoppingListFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ShoppingListFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ShoppingListFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ShoppingListFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ShoppingListFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ShoppingListFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ShoppingListFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ShoppingListField setField(
      ShoppingListField field, String colName, DbType dbtype) {
    return ShoppingListField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ShoppingListField _id;
  ShoppingListField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ShoppingListField _name;
  ShoppingListField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  ShoppingListField _priority;
  ShoppingListField get priority {
    return _priority = setField(_priority, 'priority', DbType.integer);
  }

  ShoppingListField _isDeleted;
  ShoppingListField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (ShoppingList._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<ShoppingList> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Delete sub records where in (ListItem) according to DeleteRule.CASCADE
    final idListListItemBYshoppingListId = toListPrimaryKeySQL(false);
    final resListItemBYshoppingListId = await ListItem()
        .select()
        .where('shoppingListId IN (${idListListItemBYshoppingListId['sql']})',
            parameterValue: idListListItemBYshoppingListId['args'])
        .delete(hardDelete);
    if (!resListItemBYshoppingListId.success) {
      return resListItemBYshoppingListId;
    }

    if (ShoppingList._softDeleteActivated && !hardDelete) {
      r = await _obj._mnShoppingList.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnShoppingList.delete(qparams);
    }
    return r;
  }

  /// Recover List<ShoppingList> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover ShoppingList bulk invoked');
    return _obj._mnShoppingList.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from shoppingList ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnShoppingList.updateBatch(qparams, values);
  }

  /// This method always returns ShoppingList Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<ShoppingList>
  Future<ShoppingList> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnShoppingList.toList(qparams);
    final data = await objFuture;
    ShoppingList obj;
    if (data.isNotEmpty) {
      obj = ShoppingList.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('shoppingList.plListItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plListItems'))) {
          /*_loadedFields.add('shoppingList.plListItems'); */
          obj.plListItems = obj.plListItems ??
              await obj.getListItems().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [ShoppingList]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) shoppinglistCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final shoppinglistsFuture = await _obj._mnShoppingList.toList(qparams);
    final int count = shoppinglistsFuture[0]['CNT'] as int;
    if (shoppinglistCount != null) {
      shoppinglistCount(count);
    }
    return count;
  }

  /// This method returns List<ShoppingList> [ShoppingList]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<ShoppingList>
  Future<List<ShoppingList>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<ShoppingList> shoppinglistsData = await ShoppingList.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return shoppinglistsData;
  }

  /// This method returns Json String [ShoppingList]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ShoppingList]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ShoppingList]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnShoppingList.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ShoppingList]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM shoppingList WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnShoppingList.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ShoppingList]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnShoppingList.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await ShoppingList.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnShoppingList.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ShoppingListFilterBuilder

// region ShoppingListFields
class ShoppingListFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fPriority;
  static TableField get priority {
    return _fPriority = _fPriority ??
        SqlSyntax.setField(_fPriority, 'priority', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ShoppingListFields

//region ShoppingListManager
class ShoppingListManager extends SqfEntityProvider {
  ShoppingListManager()
      : super(ShoppingModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'shoppingList';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ShoppingListManager
// region ListItem
class ListItem {
  ListItem(
      {this.id, this.name, this.quantity, this.note, this.shoppingListId}) {
    _setDefaultValues();
  }
  ListItem.withFields(
      this.name, this.quantity, this.note, this.shoppingListId) {
    _setDefaultValues();
  }
  ListItem.withId(
      this.id, this.name, this.quantity, this.note, this.shoppingListId) {
    _setDefaultValues();
  }
  ListItem.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['quantity'] != null) {
      quantity = o['quantity'] as String;
    }
    if (o['note'] != null) {
      note = o['note'] as String;
    }
    shoppingListId = int.tryParse(o['shoppingListId'].toString());

    // RELATIONSHIPS FromMAP
    plShoppingList = o['shoppingList'] != null
        ? ShoppingList.fromMap(o['shoppingList'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (ListItem)
  int id;
  String name;
  String quantity;
  String note;
  int shoppingListId;

  BoolResult saveResult;
  // end FIELDS (ListItem)

// RELATIONSHIPS (ListItem)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plShoppingList', 'plField2'..]) or so on..
  ShoppingList plShoppingList;

  /// get ShoppingList By ShoppingListId
  Future<ShoppingList> getShoppingList(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await ShoppingList().getById(shoppingListId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (ListItem)

  static const bool _softDeleteActivated = false;
  ListItemManager __mnListItem;

  ListItemManager get _mnListItem {
    return __mnListItem = __mnListItem ?? ListItemManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (quantity != null) {
      map['quantity'] = quantity;
    }

    if (note != null) {
      map['note'] = note;
    }

    if (shoppingListId != null) {
      map['shoppingListId'] = forView ? plShoppingList.name : shoppingListId;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (quantity != null) {
      map['quantity'] = quantity;
    }

    if (note != null) {
      map['note'] = note;
    }

    if (shoppingListId != null) {
      map['shoppingListId'] = forView ? plShoppingList.name : shoppingListId;
    }

    return map;
  }

  /// This method returns Json String [ListItem]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ListItem]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, quantity, note, shoppingListId];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, quantity, note, shoppingListId];
  }

  static Future<List<ListItem>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR ListItem.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<ListItem>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ListItem>[];
    try {
      objList = list
          .map((listitem) => ListItem.fromMap(listitem as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR ListItem.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ListItem>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<ListItem> objList = <ListItem>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ListItem.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('shoppingList.plShoppingList') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plShoppingList'))) {
          /*_loadedFields.add('shoppingList.plShoppingList');*/
          obj.plShoppingList = obj.plShoppingList ??
              await obj.getShoppingList(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns ListItem by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns ListItem if exist, otherwise returns null
  Future<ListItem> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    ListItem obj;
    final data = await _mnListItem.getById([id]);
    if (data.length != 0) {
      obj = ListItem.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('shoppingList.plShoppingList') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plShoppingList'))) {
          /*_loadedFields.add('shoppingList.plShoppingList');*/
          obj.plShoppingList = obj.plShoppingList ??
              await obj.getShoppingList(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ListItem) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnListItem.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnListItem.update(this);
    }

    return id;
  }

  /// saveAs ListItem. Returns a new Primary Key value of ListItem

  /// <returns>Returns a new Primary Key value of ListItem
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<ListItem> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<ListItem> listitems) async {
    // final results = _mnListItem.saveAll('INSERT OR REPLACE INTO listItem (id,name, quantity, note, shoppingListId)  VALUES (?,?,?,?,?)',listitems);
    // return results; removed in sqfentity_gen 1.3.0+6
    await ShoppingModel().batchStart();
    for (final obj in listitems) {
      await obj.save();
    }
    //    return ShoppingModel().batchCommit();
    final result = await ShoppingModel().batchCommit();
    for (int i = 0; i < listitems.length; i++) {
      if (listitems[i].id == null) {
        listitems[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnListItem.rawInsert(
              'INSERT OR REPLACE INTO listItem (id,name, quantity, note, shoppingListId)  VALUES (?,?,?,?,?)',
              [id, name, quantity, note, shoppingListId]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'ListItem id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'ListItem id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'ListItem Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<ListItem>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<ListItem> listitems) async {
    final results = await _mnListItem.rawInsertAll(
        'INSERT OR REPLACE INTO listItem (id,name, quantity, note, shoppingListId)  VALUES (?,?,?,?,?)',
        listitems);
    return results;
  }

  /// Deletes ListItem

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete ListItem invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnListItem
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnListItem.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  ListItemFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ListItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ListItemFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ListItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    shoppingListId = shoppingListId ?? 0;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion listitem

// region ListItemField
class ListItemField extends SearchCriteria {
  ListItemField(this.listitemFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ListItemFilterBuilder listitemFB;

  ListItemField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ListItemFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    listitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, listitemFB.parameters, param, SqlSyntax.EQuals,
            listitemFB._addedBlocks)
        : setCriteria(pValue, listitemFB.parameters, param, SqlSyntax.NotEQuals,
            listitemFB._addedBlocks);
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }

  ListItemFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    listitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, listitemFB.parameters, param,
            SqlSyntax.EQualsOrNull, listitemFB._addedBlocks)
        : setCriteria(pValue, listitemFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, listitemFB._addedBlocks);
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }

  ListItemFilterBuilder isNull() {
    listitemFB._addedBlocks = setCriteria(
        0,
        listitemFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        listitemFB._addedBlocks);
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }

  ListItemFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      listitemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          listitemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          listitemFB._addedBlocks);
      _waitingNot = '';
      listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
          listitemFB._addedBlocks.retVal;
    }
    return listitemFB;
  }

  ListItemFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      listitemFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          listitemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          listitemFB._addedBlocks);
      _waitingNot = '';
      listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
          listitemFB._addedBlocks.retVal;
      listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
          listitemFB._addedBlocks.retVal;
    }
    return listitemFB;
  }

  ListItemFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      listitemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          listitemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          listitemFB._addedBlocks);
      _waitingNot = '';
      listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
          listitemFB._addedBlocks.retVal;
    }
    return listitemFB;
  }

  ListItemFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      listitemFB._addedBlocks = setCriteria(
          pFirst,
          listitemFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          listitemFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        listitemFB._addedBlocks = setCriteria(pFirst, listitemFB.parameters,
            param, SqlSyntax.LessThan, listitemFB._addedBlocks);
      } else {
        listitemFB._addedBlocks = setCriteria(pFirst, listitemFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, listitemFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        listitemFB._addedBlocks = setCriteria(pLast, listitemFB.parameters,
            param, SqlSyntax.GreaterThan, listitemFB._addedBlocks);
      } else {
        listitemFB._addedBlocks = setCriteria(pLast, listitemFB.parameters,
            param, SqlSyntax.LessThanOrEquals, listitemFB._addedBlocks);
      }
    }
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }

  ListItemFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    listitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, listitemFB.parameters, param,
            SqlSyntax.GreaterThan, listitemFB._addedBlocks)
        : setCriteria(pValue, listitemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, listitemFB._addedBlocks);
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }

  ListItemFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    listitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, listitemFB.parameters, param, SqlSyntax.LessThan,
            listitemFB._addedBlocks)
        : setCriteria(pValue, listitemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, listitemFB._addedBlocks);
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }

  ListItemFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    listitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, listitemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, listitemFB._addedBlocks)
        : setCriteria(pValue, listitemFB.parameters, param, SqlSyntax.LessThan,
            listitemFB._addedBlocks);
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }

  ListItemFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    listitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, listitemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, listitemFB._addedBlocks)
        : setCriteria(pValue, listitemFB.parameters, param,
            SqlSyntax.GreaterThan, listitemFB._addedBlocks);
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }

  ListItemFilterBuilder inValues(dynamic pValue) {
    listitemFB._addedBlocks = setCriteria(
        pValue,
        listitemFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        listitemFB._addedBlocks);
    _waitingNot = '';
    listitemFB._addedBlocks.needEndBlock[listitemFB._blockIndex] =
        listitemFB._addedBlocks.retVal;
    return listitemFB;
  }
}
// endregion ListItemField

// region ListItemFilterBuilder
class ListItemFilterBuilder extends SearchCriteria {
  ListItemFilterBuilder(ListItem obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  ListItem _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ListItemFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ListItemFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ListItemFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ListItemFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ListItemFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ListItemFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ListItemFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ListItemFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ListItemFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ListItemFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ListItemFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ListItemField setField(ListItemField field, String colName, DbType dbtype) {
    return ListItemField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ListItemField _id;
  ListItemField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ListItemField _name;
  ListItemField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  ListItemField _quantity;
  ListItemField get quantity {
    return _quantity = setField(_quantity, 'quantity', DbType.text);
  }

  ListItemField _note;
  ListItemField get note {
    return _note = setField(_note, 'note', DbType.text);
  }

  ListItemField _shoppingListId;
  ListItemField get shoppingListId {
    return _shoppingListId =
        setField(_shoppingListId, 'shoppingListId', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (ListItem._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<ListItem> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (ListItem._softDeleteActivated && !hardDelete) {
      r = await _obj._mnListItem.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnListItem.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from listItem ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnListItem.updateBatch(qparams, values);
  }

  /// This method always returns ListItem Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<ListItem>
  Future<ListItem> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnListItem.toList(qparams);
    final data = await objFuture;
    ListItem obj;
    if (data.isNotEmpty) {
      obj = ListItem.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('shoppingList.plShoppingList') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plShoppingList'))) {
          /*_loadedFields.add('shoppingList.plShoppingList');*/
          obj.plShoppingList = obj.plShoppingList ??
              await obj.getShoppingList(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [ListItem]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) listitemCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final listitemsFuture = await _obj._mnListItem.toList(qparams);
    final int count = listitemsFuture[0]['CNT'] as int;
    if (listitemCount != null) {
      listitemCount(count);
    }
    return count;
  }

  /// This method returns List<ListItem> [ListItem]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<ListItem>
  Future<List<ListItem>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<ListItem> listitemsData = await ListItem.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return listitemsData;
  }

  /// This method returns Json String [ListItem]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ListItem]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ListItem]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnListItem.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ListItem]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM listItem WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnListItem.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ListItem]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnListItem.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await ListItem.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnListItem.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ListItemFilterBuilder

// region ListItemFields
class ListItemFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fQuantity;
  static TableField get quantity {
    return _fQuantity =
        _fQuantity ?? SqlSyntax.setField(_fQuantity, 'quantity', DbType.text);
  }

  static TableField _fNote;
  static TableField get note {
    return _fNote = _fNote ?? SqlSyntax.setField(_fNote, 'note', DbType.text);
  }

  static TableField _fShoppingListId;
  static TableField get shoppingListId {
    return _fShoppingListId = _fShoppingListId ??
        SqlSyntax.setField(_fShoppingListId, 'shoppingListId', DbType.integer);
  }
}
// endregion ListItemFields

//region ListItemManager
class ListItemManager extends SqfEntityProvider {
  ListItemManager()
      : super(ShoppingModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'listItem';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ListItemManager
class ShoppingModelSequenceManager extends SqfEntityProvider {
  ShoppingModelSequenceManager() : super(ShoppingModel());
}
// END OF ENTITIES
